import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

class TagaBukidAFControlService  {

	@PersistenceContext("main")
	def em;

	@ActiveDB('tagabukidtcreport')	
	def em2

	@Env
	def env;

	@ProxyMethod
	public def adjustQuantity( afcontrol, newqty, qtyadjustment, adjneg ) {
		def afinventory = em2.getinventory( [objid:afcontrol.objid] )[0]
		afcontrol = em2.getafcontrol( [objid:afcontrol.objid] )[0]
		
		if( ! afcontrol ) 
			throw new Exception('Cannot open AF Control with Stub No. ' + afcontrol.stubno + '.' )
		if( afinventory.qtyin == newqty )
			throw new Exception('New quantity must not be equal to quantity received.')
		if( qtyadjustment >= afinventory.qtyin )
			throw new Exception( 'Quantity adjusted is not valid. \nNew Quantity should not be less than or equal to zero.' )
	
		qtyadjustment = ( adjneg  ? -qtyadjustment : qtyadjustment )
		afinventory.qtyin = newqty 
		afinventory.qtybalance += qtyadjustment

		em.sqlContext.createNamedExecutor('tagabukidtcreport:updateafcontrol')
				.setParameters([objid:afcontrol.objid, qtyadjustment:qtyadjustment])
				.execute()
		
		//update inventorycredit balance 
		em.sqlContext.createNamedExecutor('tagabukidtcreport:adjustInventory')
				.setParameters([objid:afcontrol.objid, qtyadjustment:qtyadjustment])
				.execute()
				
		//update craaf inventorycredit qty 
		em.sqlContext.createNamedExecutor('tagabukidtcreport:adjustInventoryDetail')
				.setParameters([parentid:afcontrol.objid, qtyadjustment:qtyadjustment])
				.execute()
		
		
		return afcontrol 
	}
}
