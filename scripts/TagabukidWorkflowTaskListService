import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

/***********************************************************************
* This is a generic workflow service. 
* The em is a dynamic active db. pass the name of the workflow instance
* workflow instance must have the standard field names
************************************************************************/
class TagabukidWorkflowTaskListService extends ActiveListService {		

	@ActiveDB(value='document_task', em='tagabukid_etracs')
	def em

	@ActiveDB(value='userorg', em='postgrereferences')
	def empostref

	String listMethod = "getTaskListByRef"

	public void beforeList(o) {
		o.taskTablename = "document_task";
	}

	public void afterList(params,list){
		list.each{ 
			switch(it.state) {
			case 'idle':
				def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'Initialized at ' + org.Entity[0].AcronymAbbreviation;
				break;

			case 'outgoing':
				def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'For Pickup at ' + org.Entity[0].AcronymAbbreviation;
				break;

			case 'enroute':
				def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'En Route to ' + org.Entity[0].AcronymAbbreviation;
				break;

			case 'processing':
				def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'Processing in ' + org.Entity[0].AcronymAbbreviation;
				break;

			case 'archive':
				def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'Archived at ' + org.Entity[0].AcronymAbbreviation;
				break;

			case 'attached':
				//def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'Attached';
				break;

			case 'offline':
				//def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'OFFLINE';
				break;

			case 'redflag':
				def org = empostref.getOrgById([orgid:"'"+it.orgid+"'"])
				it.title = 'Red Flag for ' + org.Entity[0].AcronymAbbreviation;
				break;

			default:
				break;
		}
		} 
	}


}
