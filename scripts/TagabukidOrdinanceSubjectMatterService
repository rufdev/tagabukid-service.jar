import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class TagabukidOrdinanceSubjectMatterService extends ActiveCrudListService
{

	@ActiveDB(value='ordinancesubjectmatter', em='tagabukid_etracs')
	def em

	@Env
	def env;

	@Service('DateService')
	def dtSvc 

	void beforeList(params){
		if (params == null) params = [:]
		params.searchtext = (params.searchtext ? params.searchtext :'')+'%'
	}


	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name:"code", caption:"Code", width:40],
            [name:"name", caption:"Name", width:250],
            [name:"description", caption:"Description", width:100],
            [name:"state", caption:"State", width:100],
		]	
	}


	@ProxyMethod
	public def getLists( params ) {
		beforeList(params)
		return em.getLists(params)
	} 


	@ProxyMethod
	public def findById( objid ) {
		return em.findById([objid:objid])
	}


	@Async
	@ProxyMethod
	public def exportData(params) {
		return [
			filetype: 'ordinancesubjectmatter',
			ordinancecategories: getLists([:])
		] 
	}

	@Async
	@ProxyMethod
	public def importData( data ) {
		if (data.filetype != 'ordinancesubjectmatter')
			throw new Exception('Invalid data.')
		data.ordinancesubjectmatter.each{
			save(it)
		}
	}

	void beforeCreate(o){
		o.recordlog_datecreated = dtSvc.serverDate
		o.recordlog_createdbyuserid = env.USERID
		o.recordlog_createdbyuser = env.FULLNAME
		o.recordlog_dateoflastupdate =  dtSvc.serverDate
		o.recordlog_lastupdatedbyuserid = env.USERID
		o.recordlog_lastupdatedbyuser = env.FULLNAME
	}

	public def getMonthFirstDate( dt ) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(dt);
        cal.set( Calendar.DAY_OF_MONTH, 1 );
        return dtSvc.format('yyyy-MM-dd', cal.getTime()) + " 00:00:00";
    }
}
